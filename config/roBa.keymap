#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6
#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

/ {
    combos {
        compatible = "zmk,combos";

        semicolon {
            bindings = <&kp SEMI>;
            key-positions = <18 19>;
        };

        to_conf {
            bindings = <&sl 5>;
            key-positions = <40 39>;
        };
    };

    macros {
        mkp_exit_AML: mkp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &mkp MACRO_PLACEHOLDER &exit_AML_250>;
            label = "MKP_EXIT_AML";
        };

        exit_AML_250: exit_AML_250 {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_wait_time 250>, <&tog_off 4>;

            label = "exit_AML_250";
        };

        kp_after_exit_AML: kp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&exit_AML &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "KP_exit_AML";
        };

        pair_bracket: bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "BRACKET";
        };

        pair_brace: brace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "BRACE";
        };

        pair_parenthesis: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "NEW_MACRO";
        };

        trans_after_exit_AML: trans_exit_AML {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&exit_AML_250 &trans>;
            label = "TRANS_EXIT_AML";
        };

        mkp_exit_AML_draggable: mkp_exit_AML_draggable {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&exit_AML_250>;

            label = "MKP_EXIT_AML_DRAGGABLE";
        };

        exit_AML: exit_AML {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&tog_off 4>;
            label = "EXIT_AML";
        };
    };

    behaviors {
        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        tog_off: toggle_layer_off {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        mt_exit_AML_on_tap: mt_exit_AML_on_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_exit_AML_ON_TAP";
            bindings = <&kp>, <&kp_after_exit_AML>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };

        caps_LGUI: caps_LGUI {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS_LGUI";
            #binding-cells = <0>;
            continue-list = <TAB>;
            mods = <(MOD_LGUI)>;
        };

        sl_250: sl_250 {
            compatible = "zmk,behavior-sticky-key";
            label = "SL_250";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <250>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q         &kp W  &kp E      &kp R         &kp T                                                       &kp Y        &kp U  &kp I      &kp O       &kp P
&kp A         &kp S  &kp D      &lt 2 F       &kp G               &none                 &none             &kp H        &kp J  &kp K      &kp L       &kp BACKSPACE
&mt LSHIFT Z  &kp X  &kp C      &kp V         &kp B               &kp ESC               &none             &kp N        &kp M  &kp COMMA  &kp PERIOD  &kp ENTER
&kp TAB       &none  &kp LCTRL  &kp LEFT_ALT  &mt LEFT_WIN SPACE  &lt 1 LANGUAGE_2      &lt 3 LANGUAGE_1  &lt 1 SPACE                                &kp LG(SPACE)
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        NUM_CHAR {
            bindings = <
&none                   &none         &none         &none         &none                            &kp ASTRK     &kp MINUS      &kp PLUS      &kp EQUAL      &kp FSLH
&kp NUMBER_1            &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5       &trans      &trans  &kp NUMBER_6  &kp N7         &kp NUMBER_8  &kp N9         &kp N0
&mt LSHIFT EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT  &trans      &trans  &kp CARET     &kp AMPERSAND  &kp ASTERISK  &kp LESS_THAN  &kp GREATER_THAN
&trans                  &trans        &trans        &trans        &trans       &none       &none   &trans                                                    &trans
            >;
        };

        CHAR {
            bindings = <
&kp TILDE       &kp GRAVE          &none          &none   &none                           &pair_parenthesis  &kp RPAR           &kp PLUS         &kp ASTERISK      &kp PIPE
&kp MINUS       &kp SQT            &kp SEMICOLON  &none   &kp COMMA   &trans      &trans  &pair_bracket      &kp RIGHT_BRACKET  &kp EXCLAMATION  &kp QUESTION      &kp SLASH
&kp UNDERSCORE  &kp DOUBLE_QUOTES  &kp COLON      &none   &kp PERIOD  &trans      &trans  &pair_brace        &kp RBRC           &kp LESS_THAN    &kp GREATER_THAN  &kp BACKSLASH
&trans          &trans             &trans         &trans  &trans      &none       &none   &trans                                                                   &trans
            >;
        };

        ARROW {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans    &trans    &trans  &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans    &trans    &trans  &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                 &trans
            >;
        };

        MOUSE_MACOS {
            bindings = <
&trans_after_exit_AML             &trans_after_exit_AML  &trans_after_exit_AML  &trans_after_exit_AML  &trans_after_exit_AML                                                    &trans_after_exit_AML     &kp LC(LEFT_BRACKET)         &kp LC(UP)         &kp LC(RIGHT_BRACKET)  &kp_after_exit_AML LG(W)
&trans_after_exit_AML             &trans_after_exit_AML  &trans_after_exit_AML  &trans_after_exit_AML  &trans_after_exit_AML  &trans_after_exit_AML      &trans_after_exit_AML  &trans_after_exit_AML     &mkp_exit_AML_draggable MB1  &mkp_exit_AML MB3  &mkp_exit_AML MB2      &trans_after_exit_AML
&mt_exit_AML_on_tap LEFT_SHIFT Z  &trans_after_exit_AML  &trans_after_exit_AML  &trans_after_exit_AML  &trans_after_exit_AML  &trans_after_exit_AML      &trans_after_exit_AML  &kp LC(LS(TAB))           &mkp MB4                     &kp LC(DOWN)       &mkp MB5               &kp LC(TAB)
&trans_after_exit_AML             &none                  &none                  &trans_after_exit_AML  &trans_after_exit_AML  &trans_after_exit_AML      &trans_after_exit_AML  &kp_after_exit_AML LG(T)                                                                         &trans_after_exit_AML
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        configure {
            bindings = <
&none  &none  &none  &none  &none                    &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none      &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none      &none  &to 6  &to 7  &none  &none  &none
&none  &none  &none  &none  &none  &none      &none  &none                       &to 0
            >;
        };

        BLUETOOTH {
            bindings = <
&none         &none         &none         &none         &none                    &none       &none       &none  &none  &none
&bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none  &none      &none  &bt BT_NXT  &bt BT_PRV  &none  &none  &none
&none         &none         &none         &none         &none  &none      &none  &none       &none       &none  &none  &none
&none         &none         &none         &none         &none  &none      &none  &none                                 &to 0
            >;
        };

        cavesofqud {
            bindings = <
&kp MINUS           &kp N7  &kp N8     &kp N9    &kp R                               &none  &kp N      &kp I  &kp Q      &kp ESC
&kp A               &kp N4  &kp N5     &kp N6    &kp F     &none          &none      &kp H  &kp J      &kp E  &kp X      &none
&mt KP_PLUS LSHIFT  &kp N1  &kp N2     &kp N3    &kp K     &kp L          &none      &none  &kp LC(F)  &kp K  &kp LC(E)  &none
&kp ESC             &kp N0  &kp LCTRL  &kp LALT  &kp LGUI  &kp SPACE      &kp SPACE  &kp P                               &to 0
            >;
        };
    };
};
